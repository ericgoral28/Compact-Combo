// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© LvNThL

//@version=5
indicator("CC/HMM Combo", "CC/HMM", overlay = true)

lookback = input.int(10, "Lookback Period", 1, 4999, 1, group = "HMM Lookback Period")

//REQUESTS
[o1] = request.security(syminfo.tickerid, "1", [open[1440]]) //24 hours
[o2] = request.security(syminfo.tickerid, "D", [open]) //Day
[o3] = request.security(syminfo.tickerid, "1", [open[4320]]) //72 hours
[o4] = request.security(syminfo.tickerid, "3", [open[3360]]) //7 Days
[o5] = request.security(syminfo.tickerid, "15", [open[2880]]) //30 Days
[o6] = request.security(syminfo.tickerid, "D", [open[365]]) //Year
[o7] = request.security(syminfo.tickerid, "12M", [open]) //YTD
[o8] = request.security(syminfo.tickerid, "30", [open[4320]]) //3 Month
[o9] = request.security(syminfo.tickerid, "60", [open[4320]]) //6 Month

//VARIABLES
_totalvalue = volume * close
_change1 = (close / o1) - 1
_change2 = (close / o2) - 1
_change3 = (close / o3) - 1
_change4 = (close / o4) - 1
_change5 = (close / o5) - 1
_change6 = (close / o6) - 1
_change7 = (close / o7) - 1
_change8 = (close / o8) - 1
_change9 = (close / o9) - 1

//LABELS
var label _lbl_1 = na
var label _lbl_2 = na 
var label _lbl_3 = na
var label _lbl_4 = na
var label _lbl_5 = na
var label _lbl_6 = na
var label _lbl_7 = na
var label _lbl_8 = na
var label _lbl_9 = na
var label _lbl_10 = na
var label _lbl_11 = na
var label _lbl_12 = na

//LINES
var line _line1 = na
var line _line2 = na
var line _line3 = na
var line _line4 = na
var line _line5 = na 
var line _line6 = na
var line _line7 = na 
var line _line8 = na
var line _line9 = na
var line _line10 = na
var line _line11 = na
var line _line12 = na

//BOOLEAN
var bool intradaymas = input.bool(true, "Intraday Average Active", group = "Switches", tooltip = string("This is linked to the two intraday moving averages"))
var bool trendmas = input.bool(true, "Macro Trend Average Active", group = "Switches", tooltip = string("This is linked to the three macrotrend moving averages"))
var bool _showtrade = input.bool(true, "Show Your Trade Moves?", group = "Switches", tooltip = string("Activate/Deactivate Trade Lines"))
var bool _upscale = input.bool(false, "Enlarge Tables?", group = "Switches", tooltip = string("Activate to enlarge the size of the tables"))
//LEVERAGE
var int _leverage = input.int(1, "Leverage", minval = 1, maxval = 500, step = 1, tooltip = string("This will adjust the percentages on your entry lines"), group = "Trade Settings")

//LONG
var float _entrylong = input.float(0, title= "Long Entry", minval=0.000, step=0.001, group="Long Trade Settings", tooltip = string("Label shows percent from long entry to current price"))
var float _stoplosslong = input.float(0, title= "Long Stop Loss", minval=0.000, step=0.001, group="Long Trade Settings", tooltip = string("Label shows percent from long entry to long stop-loss"))
var float _liquidationlong = input.float(0, title = "Long Liquidation", minval = 0.000, step = 0.001, group="Long Trade Settings", tooltip = string("Label shows percent from long entry to long liquidation"))
var float _takeprofitlong1 = input.float(0, title= "Long Take Profit 1", minval=0.000, step=0.001, group="Long Trade Settings", tooltip = string("Label shows percent from long entry to long take-profit 1"))
var float _takeprofitlong2 = input.float(0, title= "Long Take Profit 2", minval=0.000, step=0.001, group="Long Trade Settings", tooltip = string("Label shows percent from long entry to long take-profit 2"))
var float _takeprofitlong3 = input.float(0, title= "Long Take Profit 3", minval=0.000, step=0.001, group="Long Trade Settings", tooltip = string("Label shows percent from long entry to long take-profit 3"))

//SHORT
var float _entryshort = input.float(0, title= "Short Entry", minval=0.000, step=0.001, group="Short Trade Settings", tooltip = string("Label shows percent from short entry to current price"))
var float _stoplossshort = input.float(0, title= "Short Stop Loss", minval=0.000, step=0.001, group="Short Trade Settings", tooltip = string("Label shows percent from short entry to short stop-loss"))
var float _liquidationshort = input.float(0, title = "Short Liquidation", minval = 0.000, step = 0.001, group="Short Trade Settings", tooltip = string("Label shows percent from short entry to short liquidation"))
var float _takeprofitshort1 = input.float(0, title= "Short Take Profit 1", minval=0.000, step=0.001, group="Short Trade Settings", tooltip = string("Label shows percent from short entry to short take-profit 1"))
var float _takeprofitshort2 = input.float(0, title= "Short Take Profit 2", minval=0.000, step=0.001, group="Short Trade Settings", tooltip = string("Label shows percent from short entry to short take-profit 2"))
var float _takeprofitshort3 = input.float(0, title= "Short Take Profit 3", minval=0.000, step=0.001, group="Short Trade Settings", tooltip = string("Label shows percent from short entry to short take-profit 3"))


//PERCENTILE
var float _percentlong = na
var float _percentshort = na 
var float _percentlongtakeprofit1 = na
var float _percentlongtakeprofit2 = na
var float _percentlongtakeprofit3 = na
var float _percentshorttakeprofit1 = na 
var float _percentshorttakeprofit2 = na 
var float _percentshorttakeprofit3 = na 


//PERCENTILE LONG
if _leverage > 1
    _percentlong := ((((close / _entrylong) -1) * 0.01) * _leverage) / 0.01
    _percentlongtakeprofit1 := ((((_takeprofitlong1 / _entrylong) -1) * 0.01) * _leverage) / 0.01
    _percentlongtakeprofit2 := ((((_takeprofitlong2 / _entrylong) -1) * 0.01) * _leverage) / 0.01
    _percentlongtakeprofit3 := ((((_takeprofitlong3 / _entrylong) -1) * 0.01) * _leverage) / 0.01

else
    _percentlong := (close / _entrylong) -1
    _percentlongtakeprofit1 := (_takeprofitlong1 / _entrylong) -1
    _percentlongtakeprofit2 := (_takeprofitlong2 / _entrylong) -1
    _percentlongtakeprofit3 := (_takeprofitlong3 / _entrylong) -1


//PERCENTILE SHORT
if _leverage > 1
    _percentshort := ((((close / _entryshort) -1) * 0.01) * _leverage) / 0.01
    _percentshorttakeprofit1 := ((((_takeprofitshort1/ _entryshort) -1) * 0.01) * _leverage) / 0.01
    _percentshorttakeprofit2 := ((((_takeprofitshort2/ _entryshort) -1) * 0.01) * _leverage) / 0.01
    _percentshorttakeprofit3 := ((((_takeprofitshort3/ _entryshort) -1) * 0.01) * _leverage) / 0.01
else
    _percentshort := (close/ _entryshort) -1
    _percentshorttakeprofit1 := (_takeprofitshort1/ _entryshort) -1
    _percentshorttakeprofit2 := (_takeprofitshort2/ _entryshort) -1
    _percentshorttakeprofit3 := (_takeprofitshort3/ _entryshort) -1

//LONG ENTRY
if _entrylong and _showtrade == true
    _line1 := line.new(bar_index-25, _entrylong, bar_index + 3, _entrylong, xloc=xloc.bar_index, extend=extend.none, color= color.rgb(0,0,255,0), style=line.style_dotted, width=2)
    line.delete(_line1[1])
    _lbl_1 := label.new(bar_index + 4, _entrylong, string("Long Entry") + string(" ") + string("(") + str.tostring(_percentlong, "#.##%") + string(" ") + string("To Current Price") + string(")"), style = label.style_label_left, color = color.rgb(0,0,0,100), textcolor = color.silver, size = size.tiny)
    label.delete(_lbl_1[1])
if _takeprofitlong1 and _showtrade == true
    _line2 := line.new(bar_index-25, _takeprofitlong1, bar_index + 3, _takeprofitlong1, xloc=xloc.bar_index, extend=extend.none, color= color.rgb(0,255,0,0), style=line.style_dotted, width=2)
    line.delete(_line2[1])
    _lbl_2 := label.new(bar_index + 4, _takeprofitlong1, string("Long Take Profit 1") + string(" ") + string("(") + str.tostring(_percentlongtakeprofit1, "#.##%") + string(" ") + string("From Entry") + string(")"), style = label.style_label_left, color = color.rgb(0,0,0,100), textcolor = color.silver, size = size.tiny)
    label.delete(_lbl_2[1])
if _takeprofitlong2 and _showtrade == true
    _line3 := line.new(bar_index-25, _takeprofitlong2, bar_index + 3, _takeprofitlong2, xloc=xloc.bar_index, extend=extend.none, color= color.rgb(0,255,0,0), style=line.style_dotted, width=2)
    line.delete(_line3[1])
    _lbl_3 := label.new(bar_index + 4, _takeprofitlong2, string("Long Take Profit 2") + string(" ") + string("(") + str.tostring(_percentlongtakeprofit2, "#.##%") + string(" ") + string("From Entry") + string(")"), style = label.style_label_left, color = color.rgb(0,0,0,100), textcolor = color.silver, size = size.tiny)
    label.delete(_lbl_3[1])
if _takeprofitlong3 and _showtrade == true
    _line4 := line.new(bar_index-25, _takeprofitlong3, bar_index + 3, _takeprofitlong3, xloc=xloc.bar_index, extend=extend.none, color= color.rgb(0,255,0,0), style=line.style_dotted, width=2)
    line.delete(_line4[1])
    _lbl_4 := label.new(bar_index + 4, _takeprofitlong3, string("Long Take Profit 3") + string(" ") + string("(") + str.tostring(_percentlongtakeprofit3, "#.##%") + string(" ") + string("From Entry") + string(")"), style = label.style_label_left, color = color.rgb(0,0,0,100), textcolor = color.silver, size = size.tiny)
    label.delete(_lbl_4[1])
if _stoplosslong and _showtrade == true
    _line5 := line.new(bar_index-25, _stoplosslong, bar_index + 3, _stoplosslong, xloc=xloc.bar_index, extend=extend.none, color= color.rgb(255,0,0,0), style=line.style_dotted, width=2)
    line.delete(_line5[1])
    _lbl_5 := label.new(bar_index + 4, _stoplosslong, string("Long Stop Loss") + string(" ") + string("(") + str.tostring((_stoplosslong / _entrylong) -1, "#.##%") + string(" ") + string("From Entry") + string(")"), style = label.style_label_left, color = color.rgb(0,0,0,100), textcolor = color.silver, size = size.tiny)
    label.delete(_lbl_5[1])
if _liquidationlong and _showtrade == true
    _line6 := line.new(bar_index-25, _liquidationlong, bar_index + 3, _liquidationlong, xloc = xloc.bar_index, extend = extend.none, color = color.purple, style=line.style_dotted, width = 2)
    line.delete(_line6[1])
    _lbl_6 := label.new(bar_index + 4, _liquidationlong, string("Long Liquidation") + string(" ") + string("(") + str.tostring((_liquidationlong / _entrylong) -1, "#.##%") + string(" ") + string("From Entry") + string(")"), style = label.style_label_left, color = color.rgb(0,0,0,100), textcolor = color.silver, size = size.tiny)
    label.delete(_lbl_6[1])

//SHORT ENTRY
if _entryshort and _showtrade == true
    _line7 := line.new(bar_index-25, _entryshort, bar_index + 3, _entryshort, xloc=xloc.bar_index, extend=extend.none, color= color.rgb(0,0,255,0), style=line.style_dotted, width=2)
    line.delete(_line7[1])
    _lbl_7 := label.new(bar_index + 4, _entryshort, string("Short Entry") + string(" ") + string("(") + str.tostring(_percentshort, "#.##%") + string(" ") + string("To Current Price") + string(")"), style = label.style_label_left, color = color.rgb(0,0,0,100), textcolor = color.silver, size = size.tiny)
    label.delete(_lbl_7[1])
if _takeprofitshort1 and _showtrade == true
    _line8 := line.new(bar_index-25, _takeprofitshort1, bar_index + 3, _takeprofitshort1, xloc=xloc.bar_index, extend=extend.none, color= color.rgb(0,255,0,0), style=line.style_dotted, width=2)
    line.delete(_line8[1])
    _lbl_8 := label.new(bar_index + 4, _takeprofitshort1, string("Short Take Profit 1") + string(" ") + string("(") + str.tostring(_percentshorttakeprofit1, "#.##%") + string(" ") + string("From Entry") + string(")"), style = label.style_label_left, color = color.rgb(0,0,0,100), textcolor = color.silver, size = size.tiny)
    label.delete(_lbl_8[1])
if _takeprofitshort2 and _showtrade == true
    _line3 := line.new(bar_index-25, _takeprofitshort2, bar_index + 3, _takeprofitshort2, xloc=xloc.bar_index, extend=extend.none, color= color.rgb(0,255,0,0), style=line.style_dotted, width=2)
    line.delete(_line3[1])
    _lbl_3 := label.new(bar_index + 4, _takeprofitshort2, string("Short Take Profit 2") + string(" ") + string("(") + str.tostring(_percentshorttakeprofit2, "#.##%") + string(" ") + string("From Entry") + string(")"), style = label.style_label_left, color = color.rgb(0,0,0,100), textcolor = color.silver, size = size.tiny)
    label.delete(_lbl_3[1])
if _takeprofitshort3 and _showtrade == true
    _line10 := line.new(bar_index-25, _takeprofitshort3, bar_index + 3, _takeprofitshort3, xloc=xloc.bar_index, extend=extend.none, color= color.rgb(0,255,0,0), style=line.style_dotted, width=2)
    line.delete(_line10[1])
    _lbl_10 := label.new(bar_index + 4, _takeprofitshort3, string("Short Take Profit 3") + string(" ") + string("(") + str.tostring(_percentshorttakeprofit3, "#.##%") + string(" ") + string("From Entry") + string(")"), style = label.style_label_left, color = color.rgb(0,0,0,100), textcolor = color.silver, size = size.tiny)
    label.delete(_lbl_10[1])
if _stoplossshort and _showtrade == true
    _line11 := line.new(bar_index-25, _stoplossshort, bar_index + 3, _stoplossshort, xloc=xloc.bar_index, extend=extend.none, color= color.rgb(255,0,0,0), style=line.style_dotted, width=2)
    line.delete(_line11[1])
    _lbl_11 := label.new(bar_index + 4, _stoplossshort, string("Short Stop Loss") + string(" ") + string("(") + str.tostring((_stoplossshort/ _entryshort) -1, "#.##%") + string(" ") + string("From Entry") + string(")"), style = label.style_label_left, color = color.rgb(0,0,0,100), textcolor = color.silver, size = size.tiny)
    label.delete(_lbl_11[1])
if _liquidationshort and _showtrade == true
    _line12 := line.new(bar_index-25, _liquidationshort, bar_index + 3, _liquidationshort, xloc = xloc.bar_index, extend = extend.none, color = color.purple, style=line.style_dotted, width = 2)
    line.delete(_line12[1])
    _lbl_12 := label.new(bar_index + 4, _liquidationshort, string("Short Liquidation") + string(" ") + string("(") + str.tostring((_liquidationshort/ _entryshort) -1, "#.##%") + string(" ") + string("From Entry") + string(")"), style = label.style_label_left, color = color.rgb(0,0,0,100), textcolor = color.silver, size = size.tiny)
    label.delete(_lbl_12[1])

//MOVING AVERAGEs
string typeMA2 = input.string("WMA", "Moving Average Type", ["SMA", "EMA", "SMMA (RMA)", "WMA", "VWMA"], group = "MA Type Settings")
string typeMA = input.string("WMA", "Smoothing Type", ["SMA", "EMA", "SMMA (RMA)", "WMA", "VWMA"], group = "MA Smoothing Settings")

ma(source, length, type) =>
    switch type
        "SMA" => ta.sma(source, length)
        "EMA" => ta.ema(source, length)
        "SMMA (RMA)" => ta.rma(source, length)
        "WMA" => ta.wma(source, length)
        "VWMA" => ta.vwma(source, length)

ma2(source, length, type) =>
    switch type
        "SMA" => ta.sma(source, length)
        "EMA" => ta.ema(source, length)
        "SMMA (RMA)" => ta.rma(source, length)
        "WMA" => ta.wma(source, length)
        "VWMA" => ta.vwma(source, length)

sma1input = input.int(7, "Intraday MA Period 1", minval = 1, maxval = 4999, step = 1, group = "Intraday MA Periods")
sma2input = input.int(9, "Intraday MA Period 2", minval = 1, maxval = 4999, step = 1, group = "Intraday MA Periods")

sma3input = input.int(30, "Macrotrend MA Period 1", minval = 1, maxval = 4999, step = 1, group = "Macrotrend MA Periods")
sma4input = input.int(100, "Macrotrend MA Period 2", minval = 1, maxval = 4999, step = 1, group = "Macrotrend MA Periods")
sma5input = input.int(200, "Macrotrend MA Period 3", minval = 1, maxval = 4999, step = 1, group = "Macrotrend MA Periods")

float sma1 = ma2(close, sma1input, typeMA2)
float sma2 = ma2(close, sma2input, typeMA2)
float sma3 = ma2(close, sma3input, typeMA2)
float sma4 = ma2(close, sma4input, typeMA2)
float sma5 = ma2(close, sma5input, typeMA2)

int smoothingLength1 = input.int(5, "Intraday MA Smoothing", minval = 1, maxval = 4999, step = 1, group = "MA Smoothing Settings", tooltip = string("This smoothing length is linked to the two intraday moving averages."))
int smoothingLength3 = input.int(100, "Macrotrend MA Smoothing", minval = 1, maxval = 4999, step = 1, group = "MA Smoothing Settings", tooltip = string("This smoothing length is linked to the three macrotrend moving averages."))

smoothingLine1 = ma(sma1, smoothingLength1, typeMA)
smoothingLine2 = ma(sma2, smoothingLength1, typeMA)
smoothingLine3 = ma(sma3, smoothingLength3, typeMA)
smoothingLine4 = ma(sma4, smoothingLength3, typeMA)
smoothingLine5 = ma(sma5, smoothingLength3, typeMA)

// PLOTS
plot(intradaymas ? smoothingLine1 : na, title = "Short MA 1", style = plot.style_linebr, color = color.new(#26c6da, 0), linewidth = 1)
plot(intradaymas ? smoothingLine2 : na, title = "Short MA 2", style = plot.style_linebr, color = color.new(#c526da, 0), linewidth = 1)
plot(trendmas ? smoothingLine3 : na, title = "Long MA 1", style = plot.style_linebr, color = color.new(#6cffe6, 0), linewidth = 1)
plot(trendmas ? smoothingLine4 : na, title = "Long MA 2", style = plot.style_linebr, color = color.new(#ffeb3b, 0), linewidth = 1)
plot(trendmas ? smoothingLine5 : na, title = "Long MA 3", style = plot.style_linebr, color = color.new(#ff6d00, 0), linewidth = 1)

//HMM
barChange1 = ta.change(close)
pctChange1 = (close/open) - 1
valChange1 = close * volume

_arrayChange = array.new_float()
_arrayPercent = array.new_float()
_arrayValue = array.new_float()
_arrayVolume = array.new_float()
_arrayHigh = array.new_float()
_arrayLow = array.new_float()

for i = 0 to lookback - 1
    array.push(_arrayChange, nz(barChange1[i]))
    array.push(_arrayPercent, nz(pctChange1[i]))
    array.push(_arrayValue, nz(valChange1[i]))
    array.push(_arrayVolume, nz(volume[i]))
    array.push(_arrayHigh, nz(high[i]))
    array.push(_arrayLow, nz(low[i]))

currentBarChange = array.get(_arrayChange, 0)
currentPctChange = array.get(_arrayPercent, 0)
currentValue = array.get(_arrayValue, 0)
currentVolume = array.get(_arrayVolume, 0)
currentHigh = array.get(_arrayHigh, 0)
currentLow = array.get(_arrayLow, 0)

array.sort(_arrayChange, order.ascending)
array.sort(_arrayPercent, order.ascending)
array.sort(_arrayValue, order.ascending)
array.sort(_arrayVolume, order.ascending)
array.sort(_arrayHigh, order.ascending)
array.sort(_arrayLow, order.ascending)

largestIncreaseBarChange = array.get(_arrayChange, lookback - 1)
largestIncreasePctChange = array.get(_arrayPercent, lookback - 1)
largestValue = array.get(_arrayValue, lookback - 1)
largestVolume = array.get(_arrayVolume, lookback - 1)
highestHigh = array.get(_arrayHigh, lookback - 1)
highestLow = array.get(_arrayLow, lookback - 1)

plotcandle(barChange1 == largestIncreaseBarChange ? open : na, high, low, close, 
 color = largestIncreaseBarChange and pctChange1 == largestIncreasePctChange ? color.rgb(128,128,255,50) : color.rgb(0,0,255,50), 
 wickcolor = largestIncreaseBarChange and pctChange1 == largestIncreasePctChange ? color.rgb(128,128,255,25) : color.rgb(0,0,255,25), 
 bordercolor = largestIncreaseBarChange and pctChange1 == largestIncreasePctChange ? color.rgb(128,128,255,0) : color.rgb(0,0,255,0))

array.sort(_arrayChange, order.descending)
array.sort(_arrayPercent, order.descending)
array.sort(_arrayValue, order.descending)
array.sort(_arrayVolume, order.descending)
array.sort(_arrayHigh, order.descending)
array.sort(_arrayLow, order.descending)

largestDecreaseBarChange = array.get(_arrayChange, lookback - 1)
largestDecreasePctChange = array.get(_arrayPercent, lookback - 1)
smallestValue = array.get(_arrayValue, lookback - 1)
smallestVolume = array.get(_arrayVolume, lookback - 1)
lowestHigh = array.get(_arrayHigh, lookback - 1)
lowestLow = array.get(_arrayLow, lookback - 1)

plotcandle(barChange1 == largestDecreaseBarChange ? open : na, high, low, close, 
 color = barChange1 == largestDecreaseBarChange and pctChange1 == largestDecreasePctChange ? color.rgb(255,255,0,50) : color.rgb(255,0,255,50), 
 wickcolor = barChange1 == largestDecreaseBarChange and pctChange1 == largestDecreasePctChange ? color.rgb(255,255,0,25) : color.rgb(255,0,255,25), 
 bordercolor = barChange1 == largestDecreaseBarChange and pctChange1 == largestDecreasePctChange ? color.rgb(255,255,0,0) : color.rgb(255,0,255,0))

//TABLE #1
_table1 = table.new(position.top_right, 50, 50, color.rgb(0,0,0,0), color.white, 1, color.gray, 1)

table.cell(_table1, 0, 0, string("Lookback Period: "), text_color = color.white, text_halign = text.align_center, text_size = _upscale ? size.small : size.tiny)
table.cell(_table1, 0, 1, height = 1, bgcolor = color.gray)
table.cell(_table1, 0, 2, string("Current Value: "), bgcolor = color.rgb(33, 149, 243, 60), text_color = color.white, text_halign = text.align_center, text_size = _upscale ? size.small : size.normal)
table.cell(_table1, 0, 3, height = 1, bgcolor = color.gray)
table.cell(_table1, 0, 4, string("Bar Largest Total Value($): "), text_color = color.white, text_halign = text.align_center, text_size = _upscale ? size.small : size.tiny)
table.cell(_table1, 0, 5, string("Current Bar Total Value($): "), bgcolor = color.rgb(33, 149, 243, 60), text_color = color.white, text_halign = text.align_center, text_size = _upscale ? size.small : size.tiny)
table.cell(_table1, 0, 6, string("Bar Smallest Total Value($): "), text_color = color.white, text_halign = text.align_center, text_size = _upscale ? size.small : size.tiny)
table.cell(_table1, 0, 7, height = 1, bgcolor = color.gray)
table.cell(_table1, 0, 8, string("Largest Increase In Value($): "), text_color = color.white, text_halign = text.align_center, text_size = _upscale ? size.small : size.tiny)
table.cell(_table1, 0, 9, string("Current Bar Change($): "), bgcolor = color.rgb(33, 149, 243, 60), text_color = color.white, text_halign = text.align_center, text_size = _upscale ? size.small : size.tiny)
table.cell(_table1, 0, 10, string("Largest Decrease In Value($): "), text_color = color.white, text_halign = text.align_center, text_size = _upscale ? size.small : size.tiny)
table.cell(_table1, 0, 11, height = 1, bgcolor = color.gray)
table.cell(_table1, 0, 12, string("Largest Increase In Value(%): "), text_color = color.white, text_halign = text.align_center, text_size = _upscale ? size.small : size.tiny)
table.cell(_table1, 0, 13, string("Current Bar Change(%): "), bgcolor = color.rgb(33, 149, 243, 60), text_color = color.white, text_halign = text.align_center, text_size = _upscale ? size.small : size.tiny)
table.cell(_table1, 0, 14, string("Largest Decrease In Value(%): "), text_color = color.white, text_halign = text.align_center, text_size = _upscale ? size.small : size.tiny)
table.cell(_table1, 0, 15, height = 1, bgcolor = color.gray)
table.cell(_table1, 0, 16, string("Bar Largest Volume: "), text_color = color.white, text_halign = text.align_center, text_size = _upscale ? size.small : size.tiny)
table.cell(_table1, 0, 17, string("Current Bar Volume: "), bgcolor = color.rgb(33, 149, 243, 60), text_color = color.white, text_halign = text.align_center, text_size = _upscale ? size.small : size.tiny)
table.cell(_table1, 0, 18, string("Bar Smallest Volume: "), text_color = color.white, text_halign = text.align_center, text_size = _upscale ? size.small : size.tiny)
table.cell(_table1, 0, 19, height = 1, bgcolor = color.gray)
table.cell(_table1, 0, 20, string("Highest High Value($): "), text_color = color.white, text_halign = text.align_center, text_size = _upscale ? size.small : size.tiny)
table.cell(_table1, 0, 21, string("Current High Value($): "), bgcolor = color.rgb(33, 149, 243, 60), text_color = color.white, text_halign = text.align_center, text_size = _upscale ? size.small : size.tiny)
table.cell(_table1, 0, 22, string("Lowest High Value($): "), text_color = color.white, text_halign = text.align_center, text_size = _upscale ? size.small : size.tiny)
table.cell(_table1, 0, 23, height = 1, bgcolor = color.gray)
table.cell(_table1, 0, 24, string("Highest Low Value($): "), text_color = color.white, text_halign = text.align_center, text_size = _upscale ? size.small : size.tiny)
table.cell(_table1, 0, 25, string("Current Low Value($): "), bgcolor = color.rgb(33, 149, 243, 60), text_color = color.white, text_halign = text.align_center, text_size = _upscale ? size.small : size.tiny)
table.cell(_table1, 0, 26, string("Lowest Low Value($): "), text_color = color.white, text_halign = text.align_center, text_size = _upscale ? size.small : size.tiny)

table.cell(_table1, 1, 0, str.tostring(lookback, "#,###") + string(" ( ") + string(timeframe.period) + string(" ) "), text_color = color.white, text_halign = text.align_center, text_size = _upscale ? size.small : size.tiny)
table.cell(_table1, 1, 1, height = 1, bgcolor = color.gray)
table.cell(_table1, 1, 2, str.tostring(close, "$###,###,###,###,###,###.###"), text_color = color.white, text_halign = text.align_center, text_size = _upscale ? size.large : size.normal)
table.cell(_table1, 1, 3, height = 1, bgcolor = color.gray)
table.cell(_table1, 1, 4, str.tostring(largestValue, "$###,###,###,###,###.##"), text_color = color.white, text_halign = text.align_center, text_size = _upscale ? size.small : size.tiny)
table.cell(_table1, 1, 5, str.tostring(currentValue, "$###,###,###,###,###.##"), text_color = color.white, text_halign = text.align_center, text_size = _upscale ? size.small : size.tiny)
table.cell(_table1, 1, 6, str.tostring(smallestValue, "$###,###,###,###,###.##"), text_color = color.white, text_halign = text.align_center, text_size = _upscale ? size.small : size.tiny)
table.cell(_table1, 1, 7, height = 1, bgcolor = color.gray)
table.cell(_table1, 1, 8, str.tostring(largestIncreaseBarChange, "$###,###,###,###,###.####"), text_color = color.white, text_halign = text.align_center, text_size = _upscale ? size.small : size.tiny)
table.cell(_table1, 1, 9, str.tostring(currentBarChange, "$###,###,###,###,###.####"), text_color = currentBarChange > 0 ? color.green : color.red, text_halign = text.align_center, text_size = _upscale ? size.small : size.tiny)
table.cell(_table1, 1, 10, str.tostring(largestDecreaseBarChange, "$###,###,###,###,###.####"), text_color = color.white, text_halign = text.align_center, text_size = _upscale ? size.small : size.tiny)
table.cell(_table1, 1, 11, height = 1, bgcolor = color.gray)
table.cell(_table1, 1, 12, str.tostring(largestIncreasePctChange, "###,###,###,###,###.##%"), text_color = color.white, text_halign = text.align_center, text_size = _upscale ? size.small : size.tiny)
table.cell(_table1, 1, 13, str.tostring(currentPctChange, "###,###,###,###,###.##%"), text_color = currentPctChange > 0 ? color.green : color.red, text_halign = text.align_center, text_size = _upscale ? size.small : size.tiny)
table.cell(_table1, 1, 14, str.tostring(largestDecreasePctChange, "###,###,###,###,###.##%"), text_color = color.white, text_halign = text.align_center, text_size = _upscale ? size.small : size.tiny)
table.cell(_table1, 1, 15, height = 1, bgcolor = color.gray)
table.cell(_table1, 1, 16, str.tostring(largestVolume, "###,###,###,###,###,###.###"), text_color = color.white, text_halign = text.align_center, text_size = _upscale ? size.small : size.tiny)
table.cell(_table1, 1, 17, str.tostring(currentVolume, "###,###,###,###,###,###.###"), text_color = color.white, text_halign = text.align_center, text_size = _upscale ? size.small : size.tiny)
table.cell(_table1, 1, 18, str.tostring(smallestVolume, "###,###,###,###,###,###.###"), text_color = color.white, text_halign = text.align_center, text_size = _upscale ? size.small : size.tiny)
table.cell(_table1, 1, 19, height = 1, bgcolor = color.gray)
table.cell(_table1, 1, 20, str.tostring(highestHigh, "$###,###,###,###,###,###.####"), text_color = color.white, text_halign = text.align_center, text_size = _upscale ? size.small : size.tiny)
table.cell(_table1, 1, 21, str.tostring(currentHigh, "$###,###,###,###,###,###.####"), text_color = color.white, text_halign = text.align_center, text_size = _upscale ? size.small : size.tiny)
table.cell(_table1, 1, 22, str.tostring(lowestHigh, "$###,###,###,###,###,###.####"), text_color = color.white, text_halign = text.align_center, text_size = _upscale ? size.small : size.tiny)
table.cell(_table1, 1, 23, height = 1, bgcolor = color.gray)
table.cell(_table1, 1, 24, str.tostring(highestLow, "$###,###,###,###,###,###.####"), text_color = color.white, text_halign = text.align_center, text_size = _upscale ? size.small : size.tiny)
table.cell(_table1, 1, 25, str.tostring(currentLow, "$###,###,###,###,###,###.####"), text_color = color.white, text_halign = text.align_center, text_size = _upscale ? size.small : size.tiny)
table.cell(_table1, 1, 26, str.tostring(lowestLow, "$###,###,###,###,###,###.####"), text_color = color.white, text_halign = text.align_center, text_size = _upscale ? size.small : size.tiny)

//TABLE #2
_table2 = table.new(position.bottom_right, 50, 50, color.rgb(0,0,0,0), color.white, 1, color.gray, 1)

table.cell(_table2, 0, 0,
 string("Rolling"), text_color = color.white, text_size = _upscale ? size.normal : size.small, text_halign = text.align_center)
table.cell(_table2, 1, 0,
 string("Percent"), text_color = color.white, text_size = _upscale ? size.normal : size.small, text_halign = text.align_center)

table.cell(_table2, 1, 1, 
 close >= o1 ? string("â³ ") + str.tostring(_change1, "+#.##%") : string("â½ ") + str.tostring(_change1, "#.##%"), text_color = close >= o1 ? color.rgb(0,255,0,0) : color.rgb(255,0,0,0), text_size = _upscale ? size.normal : size.small, text_halign = text.align_center)
table.cell(_table2, 0, 1, string(" 24-Hour"), text_color = color.white, text_size = _upscale ? size.normal : size.small, text_halign = text.align_center)

table.cell(_table2, 1, 2, 
 close >= o3 ? string("â³ ") + str.tostring(_change3, "+#.##%") : string("â½ ") + str.tostring(_change3, "#.##%"), text_color = close >= o3 ? color.rgb(0,255,0,0) : color.rgb(255,0,0,0), text_size = _upscale ? size.normal : size.small, text_halign = text.align_center)
table.cell(_table2, 0, 2, string(" 3 Day"), text_color = color.white, text_size = _upscale ? size.normal : size.small, text_halign = text.align_center)

table.cell(_table2, 1, 3, 
 close >= o4 ? string("â³ ") + str.tostring(_change4, "+#.##%") : string("â½ ") + str.tostring(_change4, "#.##%"), text_color = close >= o4 ? color.rgb(0,255,0,0) : color.rgb(255,0,0,0), text_size = _upscale ? size.normal : size.small, text_halign = text.align_center)
table.cell(_table2, 0, 3, string(" 7 Day"), text_color = color.white, text_size = _upscale ? size.normal : size.small, text_halign = text.align_center)

table.cell(_table2, 1, 4, 
 close >= o5 ? string("â³ ") + str.tostring(_change5, "+#.##%") : string("â½ ") + str.tostring(_change5, "#.##%"), text_color = close >= o5 ? color.rgb(0,255,0,0) : color.rgb(255,0,0,0), text_size = _upscale ? size.normal : size.small, text_halign = text.align_center)
table.cell(_table2, 0, 4, string(" 30 Day"), text_color = color.white, text_size = _upscale ? size.normal : size.small, text_halign = text.align_center)

table.cell(_table2, 1, 5,  
 close >= o8 ? string("â³ ") + str.tostring(_change8, "+#.##%") : string("â½ ") + str.tostring(_change8, "#.##%"), text_color = close >= o8 ? color.rgb(0,255,0,0) : color.rgb(255,0,0,0), text_size = _upscale ? size.normal : size.small, text_halign = text.align_center)
table.cell(_table2, 0, 5, string(" 90 Day"), text_color = color.white, text_size = _upscale ? size.normal : size.small, text_halign = text.align_center)

table.cell(_table2, 1, 6,  
 close >= o9 ? string("â³ ") + str.tostring(_change9, "+#.##%") : string("â½ ") + str.tostring(_change9, "#.##%"), text_color = close >= o9 ? color.rgb(0,255,0,0) : color.rgb(255,0,0,0), text_size = _upscale ? size.normal : size.small, text_halign = text.align_center)
table.cell(_table2, 0, 6, string(" 180 Day"), text_color = color.white, text_size = _upscale ? size.normal : size.small, text_halign = text.align_center)

table.cell(_table2, 1, 7,  
 close >= o6 ? string("â³ ") + str.tostring(_change6, "+#.##%") : string("â½ ") + str.tostring(_change6, "#.##%"), text_color = close >= o6 ? color.rgb(0,255,0,0) : color.rgb(255,0,0,0), text_size = _upscale ? size.normal : size.small, text_halign = text.align_center)
table.cell(_table2, 0, 7, string(" Year"), text_color = color.white, text_size = _upscale ? size.normal : size.small, text_halign = text.align_center)

table.cell(_table2, 0, 8,
 string("Static"), text_color = color.white, text_size = _upscale ? size.normal : size.small, text_halign = text.align_center)
table.cell(_table2, 1, 8,
 string("Percent"), text_color = color.white, text_size = _upscale ? size.normal : size.small, text_halign = text.align_center)

table.cell(_table2, 1, 9, 
 close >= o2 ? string("â³ ") + str.tostring(_change2, "+#.##%") : string("â½ ") + str.tostring(_change2, "#.##%"), text_color = close >= o2 ? color.rgb(0,255,0,0) : color.rgb(255,0,0,0), text_size = _upscale ? size.normal : size.small, text_halign = text.align_center)
table.cell(_table2, 0, 9, string(" Day"), text_color = color.white, text_size = _upscale ? size.normal : size.small, text_halign = text.align_center)

table.cell(_table2, 1, 10,  
 close >= o7 ? string("â³ ") + str.tostring(_change7, "+#.##%") : string("â½ ") + str.tostring(_change7, "#.##%"), text_color = close >= o7 ? color.rgb(0,255,0,0) : color.rgb(255,0,0,0), text_size = _upscale ? size.normal : size.small, text_halign = text.align_center)
table.cell(_table2, 0, 10, string(" YTD"), text_color = color.white, text_size = _upscale ? size.normal : size.small, text_halign = text.align_center)
