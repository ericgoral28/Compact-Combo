// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © LvNTh97
//@version=5

indicator("Compact Combo", "CC", overlay = true, max_bars_back = 500)

//REQUESTS
[o1, h1, l1, c1] = request.security(syminfo.tickerid, "D", [open, high, low, close], barmerge.gaps_off, barmerge.lookahead_on)
[o2, h2, l2, c2] = request.security(syminfo.tickerid, "W", [open, high, low, close], barmerge.gaps_off, barmerge.lookahead_on)
[o3, h3, l3, c3] = request.security(syminfo.tickerid, "M", [open, high, low, close], barmerge.gaps_off, barmerge.lookahead_on)
[o4, h4, l4, c4] = request.security(syminfo.tickerid, "12M", [open, high, low, close], barmerge.gaps_off, barmerge.lookahead_on)
c5 = request.security(syminfo.tickerid, "1", close[1440], barmerge.gaps_on, barmerge.lookahead_on)
c6 = request.security(syminfo.tickerid, "1", close[4320], barmerge.gaps_on, barmerge.lookahead_on)
_value = (close * volume)
_change = (close / c5) - 1
_change2 = (close / c6) - 1

//VARIABLES
var label lbl_1 = na 
var label lbl_2 = na 
var label lbl_3 = na
var label lbl_4 = na
var label lbl_5 = na
var label lbl_6 = na

var line _line1 = na
var line _line2 = na
var line _line3 = na
var line _line4 = na
var line _line5 = na 
var line _line6 = na

//TRADE INFO
var float _entrylong = input.float(0, title= "Long Entry", minval=0.000, step=0.001, group="Long Trade Settings")
var float _liquidationlong = input.float(0, title = "Long Liquidation", minval = 0.000, step = 0.001, group="Long Trade Settings")
var float _entryshort = input.float(0, title= "Short Entry", minval=0.000, step=0.001, group="Short Trade Settings")
var float _liquidationshort = input.float(0, title = "Short Liquidation", minval = 0.000, step = 0.001, group="Short Trade Settings")

if _entrylong
    _line1 := line.new(bar_index-25, _entrylong, bar_index + 3, _entrylong, xloc=xloc.bar_index, extend=extend.none, color= color.rgb(0,255,0,0), style=line.style_dotted, width=2)
    line.delete(_line1[1])
    lbl_1 := label.new(bar_index + 4, _entrylong, string("Long Entry") + string(" ") + str.tostring((close / _entrylong) -1, "#.##%"), style = label.style_label_left, color = color.rgb(0,0,0,100), textcolor = color.silver, size = size.small)
    label.delete(lbl_1[1])
if _entryshort
    _line2 := line.new(bar_index-25, _entryshort, bar_index + 3, _entryshort, xloc=xloc.bar_index, extend=extend.none, color= color.rgb(255,0,0,0), style=line.style_dotted, width=2)
    line.delete(_line2[1])
    lbl_2 := label.new(bar_index + 4, _entryshort, string("Short Entry") + string(" ") + str.tostring((_entryshort / close) -1, "#.##%"), style = label.style_label_left, color = color.rgb(0,0,0,100), textcolor = color.silver, size = size.small)
    label.delete(lbl_2[1])
if _liquidationlong
    _line3 := line.new(bar_index-25, _liquidationlong, bar_index + 3, _liquidationlong, xloc = xloc.bar_index, extend = extend.none, color = color.purple, style=line.style_dotted, width = 2)
    line.delete(_line3[1])
    lbl_3 := label.new(bar_index + 4, _liquidationlong, string("Long Liquidation"), style = label.style_label_left, color = color.rgb(0,0,0,100), textcolor = color.silver, size = size.small)
    label.delete(lbl_3[1])
if _liquidationshort
    _line4 := line.new(bar_index-25, _liquidationshort, bar_index + 3, _liquidationshort, xloc = xloc.bar_index, extend = extend.none, color = color.purple, style=line.style_dotted, width = 2)
    line.delete(_line4[1])
    lbl_4 := label.new(bar_index + 4, _liquidationshort, string("Short Liquidation"), style = label.style_label_left, color = color.rgb(0,0,0,100), textcolor = color.silver, size = size.small)
    label.delete(lbl_4[1])


//MOVING AVERAGE FUNCTION
ma(source, length, type) =>
    switch type
        "SMA" => ta.sma(source, length)
        "EMA" => ta.ema(source, length)
        "SMMA (RMA)" => ta.rma(source, length)
        "WMA" => ta.wma(source, length)
        "VWMA" => ta.vwma(source, length)

string typeMA = input.string("WMA", "Smoothing Type", ["SMA", "EMA", "SMMA (RMA)", "WMA", "VWMA"], group = "Moving Average Settings")

ma2(source, length, type) =>
    switch type
        "SMA" => ta.sma(source, length)
        "EMA" => ta.ema(source, length)
        "SMMA (RMA)" => ta.rma(source, length)
        "WMA" => ta.wma(source, length)
        "VWMA" => ta.vwma(source, length)

string typeMA2 = input.string("WMA", "Moving Average Type", ["SMA", "EMA", "SMMA (RMA)", "WMA", "VWMA"], group = "Moving Average Settings")

sma1input = input.int(7, "Short SMA Period 1", minval = 1, maxval = 4999, step = 1, group = "Short MA Periods")
sma2input = input.int(9, "Short SMA Period 2", minval = 1, maxval = 4999, step = 1, group = "Short MA Periods")
sma3input = input.int(30, "Long SMA Period 1", minval = 1, maxval = 4999, step = 1, group = "Long MA Periods")
sma4input = input.int(100, "Long SMA Period 2", minval = 1, maxval = 4999, step = 1, group = "Long MA Periods")
sma5input = input.int(200, "Long SMA Period 3", minval = 1, maxval = 4999, step = 1, group = "Long MA Periods")
float sma1 = ma2(close, sma1input, typeMA2)
float sma2 = ma2(close, sma2input, typeMA2)
float sma3 = ma2(close, sma3input, typeMA2)
float sma4 = ma2(close, sma4input, typeMA2)
float sma5 = ma2(close, sma5input, typeMA2)


bool intradaymas = input.bool(true, "Intraday Average Active", group = "Switches")
bool trendmas = input.bool(true, "Macro Trend Average Active", group = "Switches")

int smoothingLength1 = input.int(5, "Intraday MA Smoothing", minval = 1, maxval = 4999, step = 1, group = "Moving Average Settings")
int smoothingLength3 = input.int(100, "Macro Trend MA Smoothing", minval = 1, maxval = 4999, step = 1, group = "Moving Average Settings")

smoothingLine1 = ma(sma1, smoothingLength1, typeMA)
smoothingLine2 = ma(sma2, smoothingLength1, typeMA)
smoothingLine3 = ma(sma3, smoothingLength3, typeMA)
smoothingLine4 = ma(sma4, smoothingLength3, typeMA)
smoothingLine5 = ma(sma5, smoothingLength3, typeMA)


//TABLE DEFINITIONS
table1 = table.new(position.top_left, 12, 12, bgcolor = color.rgb(0,0,0,100), 
 frame_color = na, frame_width = 1, border_color = na, border_width = 1)
table2 = table.new(position.top_right, 12, 12, bgcolor = color.rgb(0,0,0,100), 
 frame_color = na, frame_width = 1, border_color = na, border_width = 1)

 
 //TABLE 1
table.cell(table1, 0, 0, string("TickerID: "), text_color = color.white, text_size = size.normal, text_halign = text.align_left)
table.cell(table1, 1, 0, str.tostring(syminfo.ticker), text_color = color.white, text_size = size.normal, text_halign = text.align_left)

table.cell(table1, 0, 1, string("Timeframe: "), text_color = color.white, text_size = size.normal, text_halign = text.align_left)
table.cell(table1, 1, 1, str.tostring(timeframe.period), text_color = color.white, text_size = size.normal, text_halign = text.align_left)

table.cell(table1, 0, 2, string("Price: "), text_color = color.white, text_size = size.normal, text_halign = text.align_left)
table.cell(table1, 1, 2, string("$") + str.tostring(close), text_color = color.white, text_size = size.normal, text_halign = text.align_left)

table.cell(table1, 0, 3, string("Volume: "), text_color = color.white, text_size = size.normal, text_halign = text.align_left)
table.cell(table1, 1, 3, str.tostring(volume, "###,###,###,###.###"), text_color = color.white, text_size = size.normal, text_halign = text.align_left)

table.cell(table1, 0, 4, string("Value: "), text_color = color.white, text_size = size.normal, text_halign = text.align_left)
table.cell(table1, 1, 4, close >= open ? str.tostring(_value, "$###,###,###.###") : str.tostring(_value, "$###,###,###.###"), text_color = close >= open ? color.rgb(0,255,0,0) : color.rgb(255,0,0,0), text_size = size.normal, text_halign = text.align_left)

//TABLE 2
table.cell(table2, 0, 0, 
 close >= c5 ? string("△ ") + str.tostring(_change, "+#.##%") : string("▽ ") + str.tostring(_change, "#.##%"), text_color = close >= c5 ? color.rgb(0,255,0,0) : color.rgb(255,0,0,0), text_size = size.small, text_halign = text.align_left)
table.cell(table2, 1, 0, string(" 24-Hour"), text_color = color.white, text_size = size.small, text_halign = text.align_left)

table.cell(table2, 0, 1, 
 close >= c6 ? string("△ ") + str.tostring(_change2, "+#.##%") : string("▽ ") + str.tostring(_change2, "#.##%"), text_color = close >= c6 ? color.rgb(0,255,0,0) : color.rgb(255,0,0,0), text_size = size.small, text_halign = text.align_left)
table.cell(table2, 1, 1, string(" 72-Hour"), text_color = color.white, text_size = size.small, text_halign = text.align_left)

table.cell(table2, 0, 2, 
 close >= o1 ? string("△ ") + str.tostring(((close / o1)-1), "+#.##%") : string("▽ ") + str.tostring(((close / o1)-1), "#.##%"), text_color = close >= o1 ? color.rgb(0,255,0,0) : color.rgb(255,0,0,0), text_size = size.small, text_halign = text.align_left)
table.cell(table2, 1, 2, string(" Day"), text_color = color.white, text_size = size.small, text_halign = text.align_left)

table.cell(table2, 0, 3, 
 close >= o2 ? string("△ ") + str.tostring(((close / o2)-1), "+#.##%") : string("▽ ") + str.tostring(((close / o2)-1), "#.##%"), text_color = close >= o2 ? color.rgb(0,255,0,0) : color.rgb(255,0,0,0), text_size = size.small, text_halign = text.align_left)
table.cell(table2, 1, 3, string(" Week"), text_color = color.white, text_size = size.small, text_halign = text.align_left)

table.cell(table2, 0, 4, 
 close >= o3 ? string("△ ") + str.tostring(((close / o3)-1), "+#.##%") : string("▽ ") + str.tostring(((close / o3)-1), "#.##%"), text_color = close >= o3 ? color.rgb(0,255,0,0) : color.rgb(255,0,0,0), text_size = size.small, text_halign = text.align_left)
table.cell(table2, 1, 4, string(" Month"), text_color = color.white, text_size = size.small, text_halign = text.align_left)

table.cell(table2, 0, 5,  
 close >= o4 ? string("△ ") + str.tostring(((close / o4)-1), "+#.##%") : string("▽ ") + str.tostring(((close / o4)-1), "#.##%"), text_color = close >= o4 ? color.rgb(0,255,0,0) : color.rgb(255,0,0,0), text_size = size.small, text_halign = text.align_left)
table.cell(table2, 1, 5, string(" YTD"), text_color = color.white, text_size = size.small, text_halign = text.align_left)

bool highlow = input.bool(false, "Daily High/Low Active", group = "Switches")

if barstate.islast and highlow == true

    _line5 := line.new(bar_index-25, h1, bar_index + 3, h1, xloc=xloc.bar_index, extend=extend.none, color=color.red, style=line.style_solid, width=1)
    line.delete(_line5[1])
    lbl_5 := label.new(bar_index + 4, h1, string("Daily High"), style = label.style_label_left, color = color.rgb(0,0,0,100), textcolor = color.silver, size = size.small)
    label.delete(lbl_5[1])

    _line6 := line.new(bar_index-25, l1, bar_index + 3, l1, xloc=xloc.bar_index, extend=extend.none, color=color.green, style=line.style_solid, width=1)
    line.delete(_line6[1])
    lbl_6 := label.new(bar_index + 4, l1, string("Daily Low"), style = label.style_label_left, color = color.rgb(0,0,0,100), textcolor = color.silver, size = size.small)
    label.delete(lbl_6[1])

//PLOTS
plot(intradaymas ? smoothingLine1 : na, title = "Short MA 1", style = plot.style_linebr, color = color.new(#26c6da, 0))
plot(intradaymas ? smoothingLine2 : na, title = "Short MA 2", style = plot.style_linebr, color = color.new(#c526da, 0))
plot(trendmas ? smoothingLine3 : na, title = "Long MA 1", style = plot.style_linebr, color = color.new(#6cffe6, 0))
plot(trendmas ? smoothingLine4 : na, title = "Long MA 2", style = plot.style_linebr, color = color.new(#ffeb3b, 0))
plot(trendmas ? smoothingLine5 : na, title = "Long MA 3", style = plot.style_linebr, color = color.new(#ff6d00, 0))

alertcondition(ta.cross(close, _entrylong), "Long Position", string("The price has crossed your Long Entry"))
alertcondition(ta.cross(close, _entryshort), "Short Position", string("The price has crossed your Short Entry"))
